<?php

/**
 * @file
 * Install, update and uninstall functions for the OMDB API module.
 */

use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\File\FileSystemInterface;
use Drupal\omdb_api\Entity\Exception\OmdbApiEntityException;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function omdb_api_install() {

  try {
    $default_scheme = \Drupal::config('system.file')->get('default_scheme') ?? \Drupal::service('file_system')->getTempDirectory();
    $destination = $default_scheme . "://omdb-api/qrcodes";

    // Prepare directory for QR codes storing.
    \Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
  }
  catch (OmdbApiEntityException $e) {
    \Drupal::logger('omdb_api')->warning(sprintf('Unable to create directories, following error logged %s ', $e->getMessage()));
  }

}

/**
 * Implements hook_requirements().
 */
function omdb_api_requirements($phase) {

  $requirements = [];
  if (($phase == 'install') || ($phase == 'runtime')) {
    $default_scheme = \Drupal::config('system.file')->get('default_scheme')
      ?? \Drupal::service('file_system')->getTempDirectory();
    $destination = $default_scheme . "://omdb-api/qrcodes";
    \Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
    $is_writable = is_writable($destination);
    $is_directory = is_dir($destination);
    if (!$is_writable || !$is_directory) {
      if (!$is_directory) {
        $error = new TranslatableMarkup('The directory @directory does not exist.', ['@directory' => $destination]);
      }
      else {
        $error = new TranslatableMarkup('The directory @directory is not writable.', ['@directory' => $destination]);
      }
      $description = new TranslatableMarkup('An automated attempt to create this directory failed, possibly due to a permissions problem. To proceed with the installation, either create the directory and modify its permissions manually or ensure that the installer has the permissions to create it automatically. For more information, see INSTALL.txt or the <a href=":handbook_url">online handbook</a>.', [':handbook_url' => 'https://www.drupal.org/server-permissions']);
      if (!empty($error)) {
        $description = $error . ' ' . $description;
        $requirements['omdb_api']['description'] = $description;
        $requirements['omdb_api']['severity'] = REQUIREMENT_ERROR;
      }
    }
  }
  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function omdb_api_uninstall() {

  // Remove the qr codes directory and generated images.

  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');
  try {
    $file_system
      ->deleteRecursive(\Drupal::config('system.file')
        ->get('default_scheme') . '://omdb-api/qrcodes');
  }
  catch (OmdbApiEntityException $e) {
    \Drupal::logger('omdb_api')->warning(sprintf('Unable to delete directories, following error logged %s ', $e->getMessage()));
  }

}

/**
 * Update hook to add new permissions to Anonymous and Authenticated roles.
 */
function omdb_api_update_9001() {

  $anonymous_role = Role::load('anonymous');
  if (!empty($anonymous_role) && !$anonymous_role->hasPermission(('View omdb api entities'))) {
    $anonymous_role->grantPermission('View omdb api entities');
    $anonymous_role->save();
  }
  $authenticated_role = Role::load('authenticated');

  if (!empty($authenticated_role) && !$authenticated_role->hasPermission(('View omdb api entities'))) {
    $authenticated_role->grantPermission('View omdb api entities');
    $authenticated_role->save();
  }
}

/**
 * Re-Import newly added config.
 */
function __omdb_api_update_9002(&$sandbox) {
  \Drupal::service('config.installer')->installDefaultConfig('module', 'omdb_api');
}
